package main

import (
	"fmt"
	"strings"
)

var rawData []int32 = []int32{
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 225, 160, 160, 160, 123, 160, 160, 160, 97, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 97, 96, 32, 32, 32,
	32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 225, 97, 32, 225, 97, 160, 32, 32, 32, 32, 225, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 96, 32, 32, 32,
	32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 225, 160, 160, 160, 126, 160, 160, 160, 97, 32, 225, 97, 226, 236, 126, 236, 127, 124, 236, 225, 226, 32, 32, 32, 32, 32,
	32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 225, 97, 32, 32, 32, 160, 32, 32, 32, 32, 225, 97, 32, 97, 32, 252, 255, 32, 97, 225, 98, 32, 32, 32, 32, 32,
	32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 225, 97, 32, 32, 32, 160, 160, 160, 97, 32, 225, 97, 32, 97, 32, 97, 225, 108, 252, 32, 225, 32, 32, 32, 32, 32,
	32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 254, 32, 32, 32, 32, 32,
	32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 85, 64, 64, 64, 64, 64, 73, 32, 85, 64, 64, 64, 64, 64, 73, 32, 85, 64, 64, 64, 64, 73, 32, 32, 32, 32,
	32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 93, 19, 3, 15, 18, 5, 93, 32, 93, 12, 9, 14, 5, 19, 93, 32, 93, 14, 5, 24, 20, 93, 32, 32, 32, 32,
	32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 107, 64, 64, 64, 64, 64, 115, 32, 107, 64, 64, 64, 64, 64, 115, 32, 107, 64, 64, 64, 64, 115, 32, 32, 32, 32,
	32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 93, 32, 32, 32, 32, 32, 93, 32, 93, 32, 32, 32, 32, 32, 93, 32, 93, 32, 32, 32, 32, 93, 32, 32, 32, 32,
	96, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 74, 64, 64, 64, 64, 64, 75, 32, 74, 64, 64, 64, 64, 64, 75, 32, 74, 64, 64, 64, 64, 75, 32, 32, 32, 32,
	96, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 85, 64, 64, 64, 64, 64, 73, 32, 32, 32, 32, 32, 32, 32, 96, 96, 96, 96, 96, 96, 32, 32, 96, 96, 96, 96,
	96, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 93, 19, 20, 1, 20, 19, 93, 32, 32, 32, 32, 32, 32, 32, 32, 96, 96, 96, 96, 96, 32, 32, 96, 96, 96, 96,
	32, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 107, 64, 64, 64, 64, 64, 113, 114, 64, 64, 64, 64, 64, 64, 114, 64, 64, 64, 64, 64, 64, 73, 96, 96, 96, 32,
	96, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 93, 98, 98, 32, 32, 32, 32, 93, 124, 252, 32, 32, 32, 32, 93, 108, 236, 32, 32, 32, 32, 93, 96, 96, 96, 96,
	96, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 93, 32, 32, 32, 32, 32, 32, 93, 32, 32, 32, 32, 32, 32, 93, 96, 32, 96, 96, 96, 96, 93, 96, 96, 96, 96,
	96, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 93, 108, 252, 32, 32, 32, 32, 93, 118, 98, 32, 32, 32, 32, 93, 108, 254, 32, 32, 32, 32, 93, 96, 96, 96, 96,
	96, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 93, 32, 32, 32, 32, 32, 32, 93, 32, 32, 32, 32, 32, 32, 93, 96, 32, 96, 96, 96, 96, 93, 96, 96, 32, 96,
	96, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 93, 225, 97, 32, 32, 32, 32, 93, 96, 96, 96, 96, 96, 96, 93, 96, 32, 96, 96, 96, 96, 93, 96, 96, 96, 96,
	96, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 74, 64, 64, 64, 64, 64, 64, 113, 64, 64, 64, 64, 64, 64, 113, 64, 64, 64, 64, 64, 64, 75, 96, 96, 96, 96,
	32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 40, 3, 41, 32, 50, 48, 50, 50, 32, 1, 14, 4, 18, 5, 1, 19, 32, 19, 9, 7, 14, 5, 18, 32, 32, 32,
	32, 32, 32, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
}

var packed []string

const rleMarker = 0

func emit(c int32) {
	packed = append(packed, fmt.Sprintf("$%02x", c))
}

func emitRun(c, l int32) {
	if l > 1 {
		for l > 256 {
			emit(rleMarker)
			emit(255)
			emit(c)
			l -= 256
		}
		emit(rleMarker)
		emit(l - 1)
		emit(c)
		return
	}
	if c == rleMarker {
		emit(rleMarker)
		emit(0)
		emit(c)
		return
	}
	emit(c)
}

func pack(raw []int32) {
	l := int32(1)
	c := rawData[0]
	for pos := 1; pos < len(rawData); pos++ {
		if rawData[pos] == c {
			// Same run
			l++
		} else {
			emitRun(c, l)
			c = rawData[pos]
			l = 1
		}
	}
	emitRun(c, l)
}

func main() {
	pack(rawData)

	fmt.Printf("Packed length: %d\n", len(packed))
	fmt.Printf("Packed:\n")
	fmt.Printf("%s\n", strings.Join(packed, ", "))
}
