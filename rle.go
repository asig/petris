package main

import (
	"fmt"
	"strings"
)

type screen struct {
	name   string
	data   []int32
	packed []string
}

var screens []screen = []screen{
	{
		name: "title_screen",
		data: []int32{
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 23, 5, 12, 3, 15, 13, 5, 32, 20, 15, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 225, 160, 160, 160, 123, 160, 160, 160, 97, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 225, 97, 32, 225, 97, 160, 32, 32, 32, 32, 225, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 225, 160, 160, 160, 126, 160, 160, 160, 97, 32, 225, 97, 226, 236, 126, 236, 127, 124, 236, 225, 226, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 225, 97, 32, 32, 32, 160, 32, 32, 32, 32, 225, 97, 32, 97, 32, 252, 255, 32, 97, 225, 98, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 225, 97, 32, 32, 32, 160, 160, 160, 97, 32, 225, 97, 32, 97, 32, 97, 225, 108, 252, 32, 225, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 254, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 3, 15, 14, 20, 18, 15, 12, 19, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 42, 42, 42, 32, 16, 18, 5, 19, 19, 32, 1, 14, 25, 32, 11, 5, 25, 32, 20, 15, 32, 19, 20, 1, 18, 20, 32, 42, 42, 42, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 40, 3, 41, 32, 50, 48, 50, 50, 32, 1, 14, 4, 18, 5, 1, 19, 32, 19, 9, 7, 14, 5, 18, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		},
	},
	{
		name: "main_screen",
		data: []int32{
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 225, 160, 160, 160, 123, 160, 160, 160, 97, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 97, 96, 32, 32, 32,
			32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 225, 97, 32, 225, 97, 160, 32, 32, 32, 32, 225, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 96, 32, 32, 32,
			32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 225, 160, 160, 160, 126, 160, 160, 160, 97, 32, 225, 97, 226, 236, 126, 236, 127, 124, 236, 225, 226, 32, 32, 32, 32, 32,
			32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 225, 97, 32, 32, 32, 160, 32, 32, 32, 32, 225, 97, 32, 97, 32, 252, 255, 32, 97, 225, 98, 32, 32, 32, 32, 32,
			32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 225, 97, 32, 32, 32, 160, 160, 160, 97, 32, 225, 97, 32, 97, 32, 97, 225, 108, 252, 32, 225, 32, 32, 32, 32, 32,
			32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 254, 32, 32, 32, 32, 32,
			32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 85, 64, 64, 64, 64, 64, 73, 32, 85, 64, 64, 64, 64, 64, 73, 32, 85, 64, 64, 64, 64, 73, 32, 32, 32, 32,
			32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 93, 19, 3, 15, 18, 5, 93, 32, 93, 12, 9, 14, 5, 19, 93, 32, 93, 14, 5, 24, 20, 93, 32, 32, 32, 32,
			32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 107, 64, 64, 64, 64, 64, 115, 32, 107, 64, 64, 64, 64, 64, 115, 32, 107, 64, 64, 64, 64, 115, 32, 32, 32, 32,
			32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 93, 32, 32, 32, 32, 32, 93, 32, 93, 32, 32, 32, 32, 32, 93, 32, 93, 32, 32, 32, 32, 93, 32, 32, 32, 32,
			96, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 74, 64, 64, 64, 64, 64, 75, 32, 74, 64, 64, 64, 64, 64, 75, 32, 74, 64, 64, 64, 64, 75, 32, 32, 32, 32,
			96, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 85, 64, 64, 64, 64, 64, 73, 32, 32, 32, 32, 32, 32, 32, 96, 96, 96, 96, 96, 96, 32, 32, 96, 96, 96, 96,
			96, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 93, 19, 20, 1, 20, 19, 93, 32, 32, 32, 32, 32, 32, 32, 32, 96, 96, 96, 96, 96, 32, 32, 96, 96, 96, 96,
			32, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 107, 64, 64, 64, 64, 64, 113, 114, 64, 64, 64, 64, 64, 64, 114, 64, 64, 64, 64, 64, 64, 73, 96, 96, 96, 32,
			96, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 93, 98, 98, 32, 32, 32, 32, 93, 124, 252, 32, 32, 32, 32, 93, 108, 236, 32, 32, 32, 32, 93, 96, 96, 96, 96,
			96, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 93, 32, 32, 32, 32, 32, 32, 93, 32, 32, 32, 32, 32, 32, 93, 96, 32, 96, 96, 96, 96, 93, 96, 96, 96, 96,
			96, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 93, 108, 252, 32, 32, 32, 32, 93, 118, 98, 32, 32, 32, 32, 93, 108, 254, 32, 32, 32, 32, 93, 96, 96, 96, 96,
			96, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 93, 32, 32, 32, 32, 32, 32, 93, 32, 32, 32, 32, 32, 32, 93, 96, 32, 96, 96, 96, 96, 93, 96, 96, 32, 96,
			96, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 93, 225, 97, 32, 32, 32, 32, 93, 96, 96, 96, 96, 96, 96, 93, 96, 32, 96, 96, 96, 96, 93, 96, 96, 96, 96,
			96, 96, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 74, 64, 64, 64, 64, 64, 64, 113, 64, 64, 64, 64, 64, 64, 113, 64, 64, 64, 64, 64, 64, 75, 96, 96, 96, 96,
			32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 40, 3, 41, 32, 50, 48, 50, 50, 32, 1, 14, 4, 18, 5, 1, 19, 32, 19, 9, 7, 14, 5, 18, 32, 32, 32,
			32, 32, 32, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		},
	},
}

const rleMarker = 0

func (scr *screen) emit(c int32) {
	scr.packed = append(scr.packed, fmt.Sprintf("$%02x", c))
}

func (scr *screen) emitRun(c, l int32) {
	if l > 1 {
		for l > 256 {
			scr.emit(rleMarker)
			scr.emit(255)
			scr.emit(c)
			l -= 256
		}
		scr.emit(rleMarker)
		scr.emit(l - 1)
		scr.emit(c)
		return
	}
	if c == rleMarker {
		scr.emit(rleMarker)
		scr.emit(0)
		scr.emit(c)
		return
	}
	scr.emit(c)
}

func pack(scr *screen) {
	scr.packed = nil
	l := int32(1)
	c := scr.data[0]
	for pos := 1; pos < len(scr.data); pos++ {
		if scr.data[pos] == c {
			// Same run
			l++
		} else {
			scr.emitRun(c, l)
			c = scr.data[pos]
			l = 1
		}
	}
	scr.emitRun(c, l)
}

func main() {
	totalLength := 0
	for _, scr := range screens {
		pack(&scr)
		totalLength += len(scr.packed)

		fmt.Printf("%s:\t.byte %s\n", scr.name, strings.Join(scr.packed, ", "))
	}
	fmt.Printf("Total packed length: %d\n", totalLength)
}
